import { Telegraf } from "telegraf";
import cron from "node-cron";
import fetch from "node-fetch";
import dotenv from "dotenv";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config({ path: path.resolve(__dirname, "../.env") });

const bot = new Telegraf(process.env.TELEGRAM_TOKEN);
const ADMIN_CHAT_ID = process.env.CHAT_ID;
const API_BASE_URL = process.env.API_BASE_URL;
const SITE_URL = process.env.SITE_URL;
const OWNER_ID = 5273914742 // —Ç–≤–æ–π Telegram ID

const visitTypeMap = {
  FIRST: "–ü–µ—Ä–≤–∏—á–Ω—ã–π",
  GARAGE: "–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π",
  FOLLOW_UP: "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π",
};

function logWithTime(emoji, message) {
  const time = new Date().toLocaleTimeString("ru-RU");
  console.log(`[${time}] ${emoji} ${message}`);
}

async function notifyUpcomingOrders() {
  try {
    logWithTime("‚è∞", "–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤...");

    const res = await fetch(`${API_BASE_URL}/api/telegram`);
    if (!res.ok) throw new Error(`–û—à–∏–±–∫–∞ API: ${res.status}`);

    const orders = await res.json();

    if (orders.length === 0) {
      logWithTime("üîï", "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
      return;
    }

    for (const order of orders) {
      const msg =
        `üîî <b>–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ #${order.id}</b>\n\n` +
        `üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <i>${new Date(order.arriveDate).toISOString().replace("T", " ").slice(0, 16)}</i>\n` +
        `üöó –¢–∏–ø –≤–∏–∑–∏—Ç–∞: <b>${visitTypeMap[order.visitType] || order.visitType}</b>\n` +
        `üèôÔ∏è –ì–æ—Ä–æ–¥: ${order.city?.name || order.city}\n` +
        `üìç –ê–¥—Ä–µ—Å: ${order.address}\n` +
        `üõ†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: ${order.problem}\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}\n` +
        `üë§ –ö–ª–∏–µ–Ω—Ç: ${order.fullName}\n\n` +
        `${SITE_URL}/admin/orders/${order.id}\n\n` +
        `@Shulna`;

      await bot.telegram.sendMessage(ADMIN_CHAT_ID, msg, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });

      logWithTime("üì®", `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É #${order.id}`);

      try {
        await fetch(`${API_BASE_URL}/api/telegram`, {
          method: "PATCH",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ id: order.id }),
        });
        logWithTime("‚úÖ", `–ó–∞–∫–∞–∑ #${order.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —É–≤–µ–¥–æ–º–ª—ë–Ω–Ω—ã–π`);
      } catch (e) {
        logWithTime("‚ùå", `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #${order.id}: ${e.message}`);
      }
    }

    logWithTime("üéâ", "–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º.");
  } catch (e) {
    logWithTime("üî•", `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: ${e.message}`);
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /notify ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
bot.command("notify", async (ctx) => {
  if (ctx.from.id !== OWNER_ID) return ctx.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");

  await ctx.telegram.sendMessage(
    ADMIN_CHAT_ID,
    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–ª–∞–Ω–æ–≤–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.",
    { parse_mode: "HTML" }
  );
  await ctx.reply("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç.");
});

// –ö–æ–º–∞–Ω–¥–∞ /work ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ —Å–∞–π—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
bot.command("work", async (ctx) => {
  if (ctx.from.id !== OWNER_ID) return ctx.reply("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");

  await ctx.telegram.sendMessage(
    ADMIN_CHAT_ID,
    "‚úÖ –°–∞–π—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
    { parse_mode: "HTML" }
  );
  await ctx.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
cron.schedule("*/1 * * * *", () => {
  notifyUpcomingOrders();
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  logWithTime("ü§ñ", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
});
