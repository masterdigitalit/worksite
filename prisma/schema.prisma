generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String    @id @default(cuid())
  username         String    @unique
  password         String
  role             String
  fullName         String?
  createdAt        DateTime? @default(now())
  telegramUsername String?
  phone            String?
  visibility       String    @default("FULL")
}

model Worker {
  id               Int      @id @default(autoincrement())
  fullName         String
  telegramUsername String?
  phone            String
  ordersCompleted  Int      @default(0)
  totalEarned      Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}



model Order {
  id             Int             @id @default(autoincrement())
  address        String
  fullName       String
  phone          String
  problem        String
  arriveDate     DateTime
  visitType      String
  callRequired   Boolean         @default(false)
  isProfessional Boolean         @default(false)
  cityId         Int?            @default(1)
  equipmentType  String
  branchComment  String?
  callCenterNote String?
  status         String          @default("PENDING")
  masterId       Int?
  checkType      String?
  paymentType    String?         @default("MEDIUM")
  received       Int?
  outlay         Int?
  receivedworker Int?
  isNotificated  Boolean         @default(false)
  dateCreated    DateTime        @default(now())
  dateStarted    DateTime?
  dateDone       DateTime?
  wastimechanged Int?            @default(0)
  city           City?           @relation(fields: [cityId], references: [id])
  documents      OrderDocument[]
  leafletId  Int?
  leaflet    Leaflet? @relation(fields: [leafletId], references: [id])
}

model OrderDocument {
  id      Int    @id @default(autoincrement())
  orderId Int
  type    String
  url     String
  order   Order  @relation(fields: [orderId], references: [id])
}

model Goal {
  id        Int      @id @default(autoincrement())
  all       Int?
  month     Int?
  day       Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model distributor {
  id             Int                    @id @default(autoincrement())
  fullName       String
  phone          String
  telegram       String
  leafletOrders  LeafletOrder[]         // связь с заказами листовок
  documents      DistributorDocument[]  // связь с документами
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model DistributorDocument {
  id             Int          @id @default(autoincrement())
  
  distributorId  Int
  type           String
  url            String

 
  distributor    distributor  @relation(fields: [distributorId], references: [id])
}


enum LeafletOrderState {
  IN_PROCESS
  DONE
  DECLINED
}

model LeafletOrder {
  id            Int                @id @default(autoincrement())
  profitType    ProfitType
  quantity      Int
  leafletId     Int
  leaflet       Leaflet            @relation("LeafletToLeafletOrders", fields: [leafletId], references: [id])
  cityId        Int
  city          City               @relation("CityToLeafletOrders", fields: [cityId], references: [id])
  distributorId Int
  distributor   distributor        @relation(fields: [distributorId], references: [id])
  state         LeafletOrderState  @default(IN_PROCESS)
  createdAt     DateTime           @default(now())
  doneAt     DateTime?           
  distributorProfit  String?
  wasBack       Boolean?
  createdBy     String?

}

model Leaflet {
  id             Int             @id @default(autoincrement())
  name           String
  value          Int?
  orders         Order[]         // твои существующие заказы
  leafletOrders  LeafletOrder[]  @relation("LeafletToLeafletOrders")
}

model City {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  orders         Order[]         // твои существующие заказы
  leafletOrders  LeafletOrder[]  @relation("CityToLeafletOrders")
}

enum ProfitType {
  MKD
  CHS
}