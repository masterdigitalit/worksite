// import { PrismaClient, OrderStatus, VisitType, CheckType } from "@prisma/client";
// const prisma = new PrismaClient();

// const statuses = Object.values(OrderStatus);
// const visitTypes = Object.values(VisitType);
// const checkTypes = Object.values(CheckType);
// const cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"];
// const campaigns = ["Instagram", "Google Ads", "–°–∞—Ä–∞—Ñ–∞–Ω"];
// const equipmentTypes = ["–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", "–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞", "–ü–æ—Å—É–¥–æ–º–æ–π–∫–∞", "–ü–ª–∏—Ç–∞"];

// async function main() {
//   let count = 1;

//   for (const status of statuses) {
//     for (const visitType of visitTypes) {
//       for (const checkType of checkTypes) {
//         const order = await prisma.order.create({
//           data: {
//             fullName: `–ö–ª–∏–µ–Ω—Ç #${count}`,
//             phone: `+79${Math.floor(Math.random() * 1000000000).toString().padStart(9, "0")}`,
//             address: `–£–ª–∏—Ü–∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. ${count}`,
//             problem: `–ü—Ä–æ–±–ª–µ–º–∞ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º #${count}`,
//             arriveDate: new Date(Date.now() + 1000 * 60 * 60 * (count % 48)), // –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
//             visitType,
//             callRequired: Math.random() > 0.5,
//             isProfessional: Math.random() > 0.5,
//             city: cities[count % cities.length],
//             clientPrice: 1000 + count * 100,
//             campaign: campaigns[count % campaigns.length],
//             equipmentType: equipmentTypes[count % equipmentTypes.length],
//             status,
//             checkType,
//             workerPrice: 500 + (count % 5) * 100,
//             pureCheck: 300 + (count % 7) * 50,
//             cashToReturn: 100 * (count % 3),
//             paymentReceived: 1000 + (count % 5) * 200,
//             branchComment: `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ñ–∏–ª–∏–∞–ª–∞ #${count}`,
//             callCenterNote: `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∫–æ–ª–ª-—Ü–µ–Ω—Ç—Ä–∞ #${count}`,
//           },
//         });

//         console.log(`–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #${order.id} (${status} / ${visitType} / ${checkType})`);
//         count++;
//       }
//     }
//   }
// }

// main()
//   .then(() => {
//     console.log("‚úÖ –í—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ–∑–¥–∞–Ω—ã");
//     return prisma.$disconnect();
//   })
//   .catch((e) => {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", e);
//     return prisma.$disconnect();
//   });



















// import { PrismaClient } from "@prisma/client";
// const prisma = new PrismaClient();

// const generateWorkers = () => {
//   const fullNames = [
//     "–ê–ª–µ–∫—Å–µ–π –°–º–∏—Ä–Ω–æ–≤", "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞", "–ò–≥–æ—Ä—å –ö–æ–∑–ª–æ–≤", "–°–≤–µ—Ç–ª–∞–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
//     "–î–º–∏—Ç—Ä–∏–π –í–∞—Å–∏–ª—å–µ–≤", "–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–ê–Ω–¥—Ä–µ–π –ú–æ—Ä–æ–∑–æ–≤", "–û–ª—å–≥–∞ –ù–∏–∫–∏—Ç–∏–Ω–∞",
//     "–ù–∏–∫–æ–ª–∞–π –§—ë–¥–æ—Ä–æ–≤", "–ê–Ω–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–∞", "–ü–∞–≤–µ–ª –í–æ–ª–∫–æ–≤", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –ü–∞–≤–ª–æ–≤–∞",
//     "–í–∏–∫—Ç–æ—Ä –°–æ–∫–æ–ª–æ–≤", "–ê–ª–∏–Ω–∞ –¢–∞—Ä–∞—Å–æ–≤–∞", "–†–æ–º–∞–Ω –û—Ä–ª–æ–≤", "–Æ–ª–∏—è –ë–∞—Ä–∞–Ω–æ–≤–∞",
//     "–ú–∞–∫—Å–∏–º –ì—Ä–∏–≥–æ—Ä—å–µ–≤", "–î–∞—Ä—å—è –ü–æ–ø–æ–≤–∞", "–°–µ—Ä–≥–µ–π –†–æ–º–∞–Ω–æ–≤", "–ò–Ω–Ω–∞ –ë–µ–ª—è–µ–≤–∞",
//     "–ê—Ä—Ç–µ–º –ó–∞—Ö–∞—Ä–æ–≤", "–í–∞–ª–µ—Ä–∏—è –ß–µ—Ä–Ω–æ–≤–∞", "–ï–≤–≥–µ–Ω–∏–π –õ–µ–±–µ–¥–µ–≤", "–ö—Ä–∏—Å—Ç–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
//     "–í–ª–∞–¥–∏–º–∏—Ä –ê–Ω—Ç–æ–Ω–æ–≤", "–¢–∞—Ç—å—è–Ω–∞ –ï–≥–æ—Ä–æ–≤–∞", "–ì–µ–æ—Ä–≥–∏–π –î–º–∏—Ç—Ä–∏–µ–≤", "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –ö–æ–≤–∞–ª–µ–≤–∞",
//     "–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ö–∏—Å–µ–ª—ë–≤", "–í–µ—Ä–æ–Ω–∏–∫–∞ –ö–∞—Ä–ø–æ–≤–∞", "–û–ª–µ–≥ –ù–∞–∑–∞—Ä–æ–≤", "–õ—é–¥–º–∏–ª–∞ –°–æ–ª–æ–≤—å—ë–≤–∞",
//     "–ò–ª—å—è –ê–Ω–¥—Ä–µ–µ–≤", "–ê–ª—ë–Ω–∞ –°—É—Ö–∞–Ω–æ–≤–∞", "–†—É—Å–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–≤", "–í–µ—Ä–∞ –ó–∞–π—Ü–µ–≤–∞",
//     "–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ë–æ–≥–¥–∞–Ω–æ–≤", "–ü–æ–ª–∏–Ω–∞ –õ—É–∫–∏–Ω–∞", "–ê–Ω–∞—Ç–æ–ª–∏–π –°–∞–≤–µ–ª—å–µ–≤", "–ñ–∞–Ω–Ω–∞ –¢–∏—Ö–æ–Ω–æ–≤–∞",
//     "–í–∞—Å–∏–ª–∏–π –®–µ—Å—Ç–∞–∫–æ–≤", "–ö—Å–µ–Ω–∏—è –ì–æ–ª—É–±–µ–≤–∞", "–ë–æ—Ä–∏—Å –ï—Ñ–∏–º–æ–≤", "–ù–∞–¥–µ–∂–¥–∞ –ü–∞–Ω–∏–Ω–∞",
//     "–ì—Ä–∏–≥–æ—Ä–∏–π –ù–∏–∫–∏—Ñ–æ—Ä–æ–≤", "–ù–∏–Ω–∞ –©–µ—Ä–±–∞–∫–æ–≤–∞", "–í–ª–∞–¥–∏—Å–ª–∞–≤ –£—Å—Ç–∏–Ω–æ–≤", "–û–∫—Å–∞–Ω–∞ –ì–∞–≤—Ä–∏–ª–æ–≤–∞",
//     "–ê—Ä—Ç—É—Ä –ï—Ä–º–∞–∫–æ–≤", "–Ø–Ω–∞ –ë–æ—Ä–∏—Å–æ–≤–∞",
//   ];

//   return fullNames.map((name, index) => ({
//     fullName: name,
//     telegramUsername: index % 4 === 0 ? null : `user${index + 1}`,
//     phone: `+7 9${Math.floor(Math.random() * 1000)
//       .toString()
//       .padStart(3, "0")}-${Math.floor(Math.random() * 10000)
//       .toString()
//       .padStart(4, "0")}`,
//   }));
// };


// async function seedWorkers() {
//   const workers = generateWorkers();

//   await prisma.worker.createMany({
//   data: workers
// });

//   console.log(`${workers.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ`);
// }

// seedWorkers()
//   .then(() => process.exit(0))
//   .catch((e) => {
//     console.error(e);
//     process.exit(1);
//   });



















// import { PrismaClient } from "@prisma/client";
// const prisma = new PrismaClient();

// function getRandomInt(min, max) {
//   return Math.floor(Math.random() * (max - min + 1)) + min;
// }

// async function updateDoneOrders() {
//   try {
//     const doneOrders = await prisma.order.findMany({
//       where: { status: "DONE" },
//       select: { id: true },
//     });

//     let updatedCount = 0;
//     const now = new Date();

//     for (const order of doneOrders) {
//       const received = getRandomInt(1000, 10000);
//       const outlay = getRandomInt(0, received);
//       const receivedworker = Math.max(0, Math.floor(received / 2) - outlay);

//       await prisma.order.update({
//         where: { id: order.id },
//         data: {
//           received,
//           outlay,
//           receivedworker,
//           dateStarted: now,
//           dateDone: now,
//         },
//       });

//       updatedCount++;
//     }

//     console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${updatedCount}`);
//   } catch (error) {
//     console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤:", error);
//   } finally {
//     await prisma.$disconnect();
//   }
// }

// updateDoneOrders();




// // scripts/seedDocuments.ts
// import { PrismaClient } from "@prisma/client";
// import { v4 as uuidv4 } from "uuid";

// const prisma = new PrismaClient();

// async function addDocumentToOrder(orderId) {
//   const filename = `${uuidv4()}.png`;
//   const url = `/uploads/${filename}`; // –±–µ–∑ /public

//   const document = await prisma.orderDocument.create({
//     data: {
//       orderId,
//       type: "PNG", // –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π enum, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
//       url,
//     },
//   });

//   console.log("–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω:", document);
// }

// async function run() {
//   await addDocumentToOrder(2); // –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª

// }

// run()
//   .then(() => {
//     console.log("–ì–æ—Ç–æ–≤–æ ‚úÖ");
//   })
//   .catch((error) => {
//     console.error("–û—à–∏–±–∫–∞ ‚ùå", error);
//   })
//   .finally(async () => {
//     await prisma.$disconnect();
//   });



// import bcrypt from "bcrypt";
// import { PrismaClient } from "@prisma/client";
// import { v4 as uuidv4 } from "uuid";

// const prisma = new PrismaClient();

// async function hashAllPasswords() {
//   const users = await prisma.user.findMany();

//   for (const user of users) {
//     const plainPassword = user.password;

//     // –ü—Ä–æ–≤–µ—Ä–∏–º, –≤–¥—Ä—É–≥ –ø–∞—Ä–æ–ª—å —É–∂–µ –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–∞–º 60 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å $2)
//     if (plainPassword.startsWith("$2") && plainPassword.length === 60) {
//       console.log(`–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} ‚Äî –ø–∞—Ä–æ–ª—å —É–∂–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω.`);
//       continue;
//     }

//     const hashed = await bcrypt.hash(plainPassword, 10);

//     await prisma.user.update({
//       where: { id: user.id },
//       data: { password: hashed },
//     });

//     console.log(`–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id} –∑–∞—Ö–µ—à–∏—Ä–æ–≤–∞–Ω.`);
//   }

//   console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ.");
// }

// hashAllPasswords()
//   .catch(console.error)
//   .finally(() => process.exit());




import { PrismaClient } from "@prisma/client";
import { v4 as uuidv4 } from "uuid";

const prisma = new PrismaClient();

async function deleteNegativeProfitOrders() {
  // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
  const orders = await prisma.order.findMany({
    select: {
      id: true,
      received: true,
      outlay: true,
      receivedworker: true,
    },
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º —É–±—ã—Ç–æ—á–Ω—ã–µ
  const negativeProfitOrders = orders.filter(
    (order) => order.received - order.outlay - order.receivedworker < 0
  );

  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ —Å —É–±—ã—Ç–∫–æ–º: ${negativeProfitOrders.length}`);

  for (const order of negativeProfitOrders) {
    await prisma.order.delete({
      where: { id: order.id },
    });
  }

  console.log("‚úÖ –£–±—ã—Ç–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã —É–¥–∞–ª–µ–Ω—ã");
  process.exit();
}

deleteNegativeProfitOrders().catch((e) => {
  console.error(e);
  process.exit(1);
});

// import { faker } from "@faker-js/faker";

// async function seed() {
//   const monthsBack = 12;
//   const now = new Date();

//   // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã 5 —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤, –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞–¥–∏–º
//   const existingWorkers = await prisma.worker.findMany();
//   let workers = existingWorkers;

//   if (workers.length < 5) {
//     const created = await Promise.all(
//       Array.from({ length: 5 }).map(() =>
//         prisma.worker.create({
//           data: {
//             fullName: faker.person.fullName(),
//             telegramUsername: faker.internet.userName(),
//             phone: faker.phone.number(),
//           },
//         })
//       )
//     );
//     workers = created;
//   }

//   for (let i = 0; i < 1000; i++) {
//     const monthOffset = Math.floor(Math.random() * monthsBack);
//     const dayOffset = Math.floor(Math.random() * 28);
//     const createdAt = new Date(
//       now.getFullYear(),
//       now.getMonth() - monthOffset,
//       dayOffset + 1
//     );

//     const worker = faker.helpers.arrayElement(workers);

//     const received = faker.number.int({ min: 1000, max: 10000 });
//     const outlay = faker.number.int({ min: 500, max: 5000 });
//     const receivedWorker = faker.number.int({ min: 500, max: 5000 });

//     await prisma.order.create({
//       data: {
//         fullName: faker.person.fullName(),
//         phone: faker.phone.number(),
//         address: faker.location.streetAddress(),
//         city: faker.location.city(),
//         problem: faker.lorem.sentence(),
//         status: "DONE",
//         received,
//         outlay,
//         receivedworker: receivedWorker,
//         dateDone: createdAt,
//         arriveDate: createdAt,
//         visitType: "FIRST",
//         isProfessional: false,
//         callRequired: false,
//         equipmentType: "general",
//         masterId: worker.id,
//       },
//     });

//     await prisma.worker.update({
//       where: { id: worker.id },
//       data: {
//         ordersCompleted: { increment: 1 },
//         totalEarned: { increment: receivedWorker },
//       },
//     });
//   }

//   console.log("‚úÖ 1000 –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–Ω–æ, —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã");
//   process.exit();
// }

// seed().catch((e) => {
//   console.error(e);
//   process.exit(1);
// });
