import { getServerSession } from "next-auth";
import { authOptions } from "@/server/api/auth/auth";

import Link from "next/link";
import clsx from "clsx";

import { getTodayStats } from "@/server/api/stats/getDailyStats";
import { getMonthStats } from "@/server/api/stats/getMonthStats";
import { getProfitStats } from "@/server/api/stats/getProfitStats";
import { getStatusCounts } from "@/server/api/stats/countByStatus";

export default async function AdminPage() {
  const session = await getServerSession(authOptions);
const fullName =
  session?.user?.fullName === "–ê–ø—Ç–∏"
    ? "–°–∞–ª–∞–º –ê–ª–µ–π–∫—É–º –ê–ø—Ç–∏"
    : '–ü—Ä–∏–≤–µ—Ç, '+session?.user?.fullName || '–ü—Ä–∏–≤–µ—Ç, '+"–ê–¥–º–∏–Ω";
    console.log(session?.user?.fullName)


  const [todayStats, monthStats, profitStats, statusCounts] = await Promise.all([
    getTodayStats(),
    getMonthStats(),
    getProfitStats(),
    getStatusCounts(),
  ]);

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold"> {fullName}</h1>

      {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <StatCard
          title="üìÜ –ó–∞ —Å–µ–≥–æ–¥–Ω—è"
          total={todayStats.profit}
          count={todayStats.count}
          received={todayStats.received}
          outlay={todayStats.outlay}
          receivedworker={todayStats.receivedworker}
          type="day"
        />

        <StatCard
          title="üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü"
          total={monthStats.profit}
          count={monthStats.count}
          received={monthStats.received}
          outlay={monthStats.outlay}
          receivedworker={monthStats.receivedworker}
              type="month"
        />

        <div className="p-4 border rounded-lg shadow">
          <h2 className="text-xl font-bold mb-2">üíé –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å</h2>
          <p className="text-3xl text-green-600 font-bold mb-2">{profitStats.totalProfit} ‚ÇΩ</p>

          <div className="text-sm text-gray-600 space-y-1 mt-2">
            <p>üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: <span className="font-semibold">{profitStats.receivedworker} ‚ÇΩ</span></p>
            <p>üßæ –†–∞—Å—Ö–æ–¥—ã –Ω–∞ –∑–∞–∫—É–ø: <span className="font-semibold">{profitStats.outlay} ‚ÇΩ</span></p>
          </div>
        </div>
      </div>

      {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ */}
<div className="grid grid-cols-1 md:grid-cols-3 gap-6">
  {Object.entries(statusGroupMap).map(([groupKey, statuses]) => {
    const totalCount = statuses.reduce(
      (acc, status) => acc + (statusCounts[status] || 0),
      0
    );

    return (
      <div key={groupKey} className="bg-white p-4 rounded-xl shadow">
        <h2 className="text-lg font-bold mb-4">{groupTitleMap[groupKey]}</h2>

        <p className="text-5xl font-extrabold mb-4 text-blue-700">{totalCount}</p>

        <div className="space-y-1 text-gray-700">
          {statuses.map((status) => (
            <Link
              key={status}
              href={`/admin/orders?status=${status}`}
              className="flex justify-between items-center hover:underline"
            >
              <span>{statusesUI[status].label}</span>
              <span className={`${statusesUI[status].color} font-semibold text-1.2xl`}>
                {statusCounts[status] || 0}
              </span>
            </Link>
          ))}
        </div>
      </div>
    );
  })}
</div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function StatCard({
  title,
  total,
  count,
  received,
  outlay,
  receivedworker,
  type,
}: {
  title: string;
  total: number;
  count: number;
  received: number;
  outlay: number;
  receivedworker: number;
  type: string;
}) {
  let profitPercent = 0;
  let costPercent = 0;
  let base = 0;

  switch (type) {
    case "day": {
      base = 30000;
      profitPercent = Math.round((total / base) * 100);
      costPercent = Math.min(100 - profitPercent, 100);
      break;
    }

    case "month": {
      base = 1000000;
      profitPercent = Math.round((total / base) * 100);
      costPercent = Math.min(100 - profitPercent, 100);
      break;
    }

    default: {
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø:", type);
      profitPercent = 0;
      costPercent = 0;
      break;
    }
  }

  return (
    <div className="p-4 border rounded-lg shadow">
      <h2 className="text-xl font-bold mb-2">{title}</h2>

      {/* –°—É–º–º–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
      <p className="text-xl text-black-500 mb-2">
        C—É–º–º–∞ –∑–∞–∫—Ä—ã—Ç–∏—è - {received} ‚ÇΩ
      </p>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä: –ø—Ä–∏–±—ã–ª—å vs –∑–∞—Ç—Ä–∞—Ç—ã */}
      <div className="w-full bg-gray-200 rounded-full h-4 mb-4 flex overflow-hidden relative group">
        <div
          className="bg-green-500 h-4 transition-all duration-300"
          style={{ width: `${profitPercent}%` }}
        >
          {/* Tooltip */}
          <div className="absolute left-0 -top-8 bg-black text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition pointer-events-none">
            –ü—Ä–∏–±—ã–ª—å: {profitPercent}% –æ—Ç —Ü–µ–ª–∏ ({base.toLocaleString("ru-RU")} ‚ÇΩ)
          </div>
        </div>
        <div
          className="bg-red-400 h-4 transition-all duration-300"
          style={{ width: `${costPercent}%` }}
        />
      </div>

      {/* –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è */}
      <div className="text-sm text-gray-700 space-y-1">
        <p>
          üìà –ü—Ä–∏–±—ã–ª—å: <span className="text-green-600 font-semibold">{total} ‚ÇΩ</span>
        </p>
        <p>
          üì¶ –ó–∞–∫–∞–∑–æ–≤: <span className="font-semibold">{count}</span>
        </p>
        <p>
          üè¢ –†–∞—Å—Ö–æ–¥—ã –æ—Ñ–∏—Å/–∑–∞–∫—É–ø: <span className="text-red-600 font-semibold">{outlay} ‚ÇΩ</span>
        </p>
        <p>
          üë∑ –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:{" "}
          <span className="text-orange-600 font-semibold">{receivedworker} ‚ÇΩ</span>
        </p>
      </div>
    </div>
  );
}



// UI –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
const statusesUI: Record<string, { label: string; color: string }> = {
  PENDING: { label: "üïì –û–∂–∏–¥–∞–µ—Ç", color: "text-gray-600" },
  ON_THE_WAY: { label: "üöó –í –ø—É—Ç–∏", color: "text-blue-600" },
  IN_PROGRESS: { label: "üîß –í —Ä–∞–±–æ—Ç–µ", color: "text-orange-600" },
  IN_PROGRESS_SD: { label: "üì∑ –í —Ä–∞–±–æ—Ç–µ + SD", color: "text-orange-500" },
  DECLINED: { label: "‚ùå –û—Ç–∫–∞–∑", color: "text-red-500" },
  CANCEL_CC: { label: "üìû –û—Ç–º–µ–Ω–∞ (–¶–¶)", color: "text-red-400" },
  CANCEL_BRANCH: { label: "üè¢ –û—Ç–º–µ–Ω–∞ (–§–∏–ª–∏–∞–ª)", color: "text-red-400" },
  DONE: { label: "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω", color: "text-green-600" },
};

// –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
const statusGroupMap: Record<string, string[]> = {
  waiting: ["PENDING", "ON_THE_WAY"],
  inProgress: ["IN_PROGRESS", "IN_PROGRESS_SD"],
  finished: ["DONE", "DECLINED", "CANCEL_CC", "CANCEL_BRANCH"],
};

const groupTitleMap: Record<string, string> = {
  waiting: "üì¶ –û–∂–∏–¥–∞—é—Ç –Ω–∞—á–∞–ª–∞",
  inProgress: "üîß –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
  finished: "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ / –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ",
};
